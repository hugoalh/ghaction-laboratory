on:
  workflow_dispatch:
jobs:
  test:
    runs-on: "ubuntu-latest"
    steps:
      - run: |
          Function Test-Environment {
            [CmdletBinding()]
            [OutputType(([Boolean], [Void]))]
            Param (
              [Switch]$Artifact,
              [Switch]$Cache,
              [Alias('Oidc')][Switch]$OpenIdConnect,
              [Switch]$StepSummary,
              [Switch]$ToolCache,
              [Alias('Require', 'Required')][Switch]$Mandatory,
              [Alias('RequiredMessage', 'RequireMessage')][String]$MandatoryMessage = 'This process requires to invoke inside the GitHub Actions environment!'
            )
            If (# Some conditions are disabled to provide compatibility, will enable those when with runner version requirement.
              ($Env:CI -ine 'true') -or
              [String]::IsNullOrWhiteSpace($Env:GITHUB_ACTION) -or
              ($Env:GITHUB_ACTIONS -ine 'true') -or
              [String]::IsNullOrWhiteSpace($Env:GITHUB_ACTOR) -or
              # [String]::IsNullOrWhiteSpace($Env:GITHUB_ACTOR_ID) -or
              [String]::IsNullOrWhiteSpace($Env:GITHUB_API_URL) -or
              [String]::IsNullOrWhiteSpace($Env:GITHUB_ENV) -or
              [String]::IsNullOrWhiteSpace($Env:GITHUB_EVENT_NAME) -or
              [String]::IsNullOrWhiteSpace($Env:GITHUB_EVENT_PATH) -or
              [String]::IsNullOrWhiteSpace($Env:GITHUB_GRAPHQL_URL) -or
              [String]::IsNullOrWhiteSpace($Env:GITHUB_JOB) -or
              [String]::IsNullOrWhiteSpace($Env:GITHUB_PATH) -or
              [String]::IsNullOrWhiteSpace($Env:GITHUB_REF_NAME) -or
              [String]::IsNullOrWhiteSpace($Env:GITHUB_REF_PROTECTED) -or
              [String]::IsNullOrWhiteSpace($Env:GITHUB_REF_TYPE) -or
              [String]::IsNullOrWhiteSpace($Env:GITHUB_REPOSITORY) -or
              # [String]::IsNullOrWhiteSpace($Env:GITHUB_REPOSITORY_ID) -or
              [String]::IsNullOrWhiteSpace($Env:GITHUB_REPOSITORY_OWNER) -or
              # [String]::IsNullOrWhiteSpace($Env:GITHUB_REPOSITORY_OWNER_ID) -or
              [String]::IsNullOrWhiteSpace($Env:GITHUB_RUN_ATTEMPT) -or
              [String]::IsNullOrWhiteSpace($Env:GITHUB_RUN_ID) -or
              [String]::IsNullOrWhiteSpace($Env:GITHUB_RUN_NUMBER) -or
              [String]::IsNullOrWhiteSpace($Env:GITHUB_SERVER_URL) -or
              [String]::IsNullOrWhiteSpace($Env:GITHUB_SHA) -or
              [String]::IsNullOrWhiteSpace($Env:GITHUB_WORKFLOW) -or
              # [String]::IsNullOrWhiteSpace($Env:GITHUB_WORKFLOW_REF) -or
              # [String]::IsNullOrWhiteSpace($Env:GITHUB_WORKFLOW_SHA) -or
              [String]::IsNullOrWhiteSpace($Env:GITHUB_WORKSPACE) -or
              [String]::IsNullOrWhiteSpace($Env:RUNNER_ARCH) -or
              [String]::IsNullOrWhiteSpace($Env:RUNNER_NAME) -or
              [String]::IsNullOrWhiteSpace($Env:RUNNER_OS) -or
              [String]::IsNullOrWhiteSpace($Env:RUNNER_TEMP) -or
              ((
                $Artifact.IsPresent -or
                $Cache.IsPresent
              ) -and [String]::IsNullOrWhiteSpace($Env:ACTIONS_RUNTIME_TOKEN)) -or
              ($Artifact.IsPresent -and [String]::IsNullOrWhiteSpace($Env:ACTIONS_RUNTIME_URL)) -or
              ($Artifact.IsPresent -and [String]::IsNullOrWhiteSpace($Env:GITHUB_RETENTION_DAYS)) -or
              ($Cache.IsPresent -and [String]::IsNullOrWhiteSpace($Env:ACTIONS_CACHE_URL)) -or
              ($OpenIdConnect.IsPresent -and [String]::IsNullOrWhiteSpace($Env:ACTIONS_ID_TOKEN_REQUEST_TOKEN)) -or
              ($OpenIdConnect.IsPresent -and [String]::IsNullOrWhiteSpace($Env:ACTIONS_ID_TOKEN_REQUEST_URL)) -or
              ($StepSummary.IsPresent -and [String]::IsNullOrWhiteSpace($Env:GITHUB_STEP_SUMMARY)) -or
              ($ToolCache.IsPresent -and [String]::IsNullOrWhiteSpace($Env:RUNNER_TOOL_CACHE))
            ) {
              If ($Mandatory.IsPresent) {
                Write-GitHubActionsFail -Message $MandatoryMessage
                Throw
              }
              Write-Output -InputObject $False
              Return
            }
            If (!$Mandatory.IsPresent) {
              Write-Output -InputObject $True
            }
          }
          Test-Environment
        shell: "pwsh"
