on:
  workflow_dispatch:
jobs:
  test:
    runs-on: "ubuntu-latest"
    steps:
      - run: |
          Function Test-Environment {
            [CmdletBinding()]
            [OutputType(([Boolean], [Void]))]
            Param (
              [Switch]$Artifact,
              [Switch]$Cache,
              [Alias('Oidc')][Switch]$OpenIdConnect,
              [Switch]$ToolCache,
              [Alias('Require', 'Required')][Switch]$Mandatory,
              [Alias('RequiredMessage', 'RequireMessage')][String]$MandatoryMessage = 'This process requires to invoke inside the GitHub Actions environment!',
              [Switch]$StepSummary# Deprecated, keep as legacy.
            )
            [Hashtable[]]$Conditions = @(
              @{ NeedTest = $True; Name = 'CI'; ExpectedValue = 'true' },
              @{ NeedTest = $True; Name = 'GITHUB_ACTION'; },
              @{ NeedTest = $True; Name = 'GITHUB_ACTIONS'; ExpectedValue = 'true' },
              @{ NeedTest = $True; Name = 'GITHUB_ACTOR'; },
              @{ NeedTest = $True; Name = 'GITHUB_ACTOR_ID'; },
              @{ NeedTest = $True; Name = 'GITHUB_API_URL'; },
              @{ NeedTest = $True; Name = 'GITHUB_ENV'; },
              @{ NeedTest = $True; Name = 'GITHUB_EVENT_NAME'; },
              @{ NeedTest = $True; Name = 'GITHUB_EVENT_PATH'; },
              @{ NeedTest = $True; Name = 'GITHUB_GRAPHQL_URL'; },
              @{ NeedTest = $True; Name = 'GITHUB_JOB'; },
              @{ NeedTest = $True; Name = 'GITHUB_PATH'; },
              @{ NeedTest = $True; Name = 'GITHUB_REF_NAME'; },
              @{ NeedTest = $True; Name = 'GITHUB_REF_PROTECTED'; },
              @{ NeedTest = $True; Name = 'GITHUB_REF_TYPE'; },
              @{ NeedTest = $True; Name = 'GITHUB_REPOSITORY'; },
              @{ NeedTest = $True; Name = 'GITHUB_REPOSITORY_ID'; },
              @{ NeedTest = $True; Name = 'GITHUB_REPOSITORY_OWNER'; },
              @{ NeedTest = $True; Name = 'GITHUB_REPOSITORY_OWNER_ID'; },
              @{ NeedTest = $True; Name = 'GITHUB_RETENTION_DAYS'; },
              @{ NeedTest = $True; Name = 'GITHUB_RUN_ATTEMPT'; },
              @{ NeedTest = $True; Name = 'GITHUB_RUN_ID'; },
              @{ NeedTest = $True; Name = 'GITHUB_RUN_NUMBER'; },
              @{ NeedTest = $True; Name = 'GITHUB_SERVER_URL'; },
              @{ NeedTest = $True; Name = 'GITHUB_SHA'; },
              @{ NeedTest = $True; Name = 'GITHUB_STEP_SUMMARY'; },
              @{ NeedTest = $True; Name = 'GITHUB_WORKFLOW'; },
              @{ NeedTest = $True; Name = 'GITHUB_WORKFLOW_REF'; },
              @{ NeedTest = $True; Name = 'GITHUB_WORKFLOW_SHA'; },
              @{ NeedTest = $True; Name = 'GITHUB_WORKSPACE'; },
              @{ NeedTest = $True; Name = 'RUNNER_ARCH'; },
              @{ NeedTest = $True; Name = 'RUNNER_NAME'; },
              @{ NeedTest = $True; Name = 'RUNNER_OS'; },
              @{ NeedTest = $True; Name = 'RUNNER_TEMP'; },
              @{ NeedTest = $True; Name = 'RUNNER_TOOL_CACHE'; },
              @{ NeedTest = $Artifact.IsPresent -or $Cache.IsPresent; Name = 'ACTIONS_RUNTIME_TOKEN'; },
              @{ NeedTest = $Artifact.IsPresent; Name = 'ACTIONS_RUNTIME_URL'; },
              @{ NeedTest = $Cache.IsPresent; Name = 'ACTIONS_CACHE_URL'; },
              @{ NeedTest = $OpenIdConnect.IsPresent; Name = 'ACTIONS_ID_TOKEN_REQUEST_TOKEN'; },
              @{ NeedTest = $OpenIdConnect.IsPresent; Name = 'ACTIONS_ID_TOKEN_REQUEST_URL'; }
            )
            [Boolean]$Failed = $False
            ForEach ($Condition In $Conditions) {
              If ($Condition.NeedTest) {
                Try {
                  If ($Null -ieq $Condition.ExpectedValue) {
                    If ([String]::IsNullOrEmpty((Get-Content -LiteralPath "Env:\$($Condition.Name)" -ErrorAction 'SilentlyContinue'))) {
                      Throw "Unable to get the GitHub Actions resources: Environment path ``$($Condition.Name)`` is not defined!"
                    }
                  }
                  Else {
                    If ((Get-Content -LiteralPath "Env:\$($Condition.Name)" -ErrorAction 'SilentlyContinue') -ine $Condition.ExpectedValue) {
                      Throw "Unable to get the GitHub Actions resources: Environment path ``$($Condition.Name)`` is not defined or not equal to expected value!"
                    }
                  }
                }
                Catch {
                  $Failed = $True
                  Write-Warning -Message $_
                }
              }
            }
            If ($Failed) {
              If ($Mandatory.IsPresent) {
                Write-GitHubActionsFail -Message $MandatoryMessage
                Throw
              }
              Write-Output -InputObject $False
              Return
            }
            If (!$Mandatory.IsPresent) {
              Write-Output -InputObject $True
            }
          }
          Test-Environment
        shell: "pwsh"